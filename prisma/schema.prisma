datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  AGENCY_OWNER
  AGENCY_ADMIN
  SUBACCOUNT_USER
  SUBACCOUNT_GUEST
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

enum Icon {
  settings
  chart
  calendar
  check
  chip
  compass
  database
  flag
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
}

model User {
  id           String         @id @default(uuid()) @map("_id") @db.String
  name         String
  avatarUrl    String
  email        String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  role         Role           @default(SUBACCOUNT_USER)
  agencyId     String?        @db.String
  Agency       Agency?        @relation(fields: [agencyId], references: [id])
  Permissions  Permissions[]
  Ticket       Ticket[]
  Notification Notification[]

  @@index([agencyId])
}

model Permissions {
  id           String     @id @default(uuid()) @map("_id") @db.String
  email        String
  User         User       @relation(fields: [email], references: [email])
  subAccountId String     @db.String
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id])
  access       Boolean

  @@index([subAccountId])
  @@index([email])
}

model Agency {
  id               String                @id @default(uuid()) @map("_id") @db.String
  connectAccountId String?
  customerId       String?
  name             String
  agencyLogo       String
  companyEmail     String
  companyPhone     String
  whiteLabel       Boolean               @default(true)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  goal             Int                   @default(5)
  users            User[]
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  SubAccount       SubAccount[]
  SidebarOption    AgencySidebarOption[]
  Invitation       Invitation[]
  Notification     Notification[]
  Subscription     Subscription?
  AddOns           AddOns[]
}

model SubAccount {
  id               String                    @id @default(uuid()) @map("_id") @db.String
  connectAccountId String?
  name             String
  subAccountLogo   String
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  companyEmail     String
  companyPhone     String
  goal             Int                       @default(5)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  agencyId         String                    @db.String
  Agency           Agency                    @relation(fields: [agencyId], references: [id])
  SidebarOption    SubAccountSidebarOption[]
  Permissions      Permissions[]
  Funnels          Funnel[]
  Media            Media[]
  Contact          Contact[]
  Trigger          Trigger[]
  Automation       Automation[]
  Pipeline         Pipeline[]
  Tags             Tag[]
  Notification     Notification[]

  @@index([agencyId])
}

model Tag {
  id           String   @id @default(uuid()) @map("_id") @db.String
  name         String
  color        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  subAccountId String   @db.String

  ticketIds  String[] // Array of Ticket IDs to establish many-to-many relation
  SubAccount SubAccount  @relation(fields: [subAccountId], references: [id])
  Tickets    TicketTag[] // Связь через промежуточную таблицу

  @@index([subAccountId])
}

model Pipeline {
  id           String     @id @default(uuid()) @map("_id") @db.String
  name         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Lane         Lane[]
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id])
  subAccountId String     @db.String

  @@index([subAccountId])
}

model Lane {
  id         String   @id @default(uuid()) @map("_id") @db.String
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Pipeline   Pipeline @relation(fields: [pipelineId], references: [id])
  pipelineId String   @db.String
  Tickets    Ticket[]
  order      Int      @default(0)

  @@index([pipelineId])
}

model Ticket {
  id          String   @id @default(uuid()) @map("_id") @db.String
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  laneId      String   @db.String
  order       Int      @default(0)
  Lane        Lane     @relation(fields: [laneId], references: [id])
  value       Float?
  description String?

  tagIds String[] // Array of Tag IDs to establish many-to-many relation

  customerId String?  @db.String
  Customer   Contact? @relation(fields: [customerId], references: [id])

  assignedUserId String?     @db.String
  Assigned       User?       @relation(fields: [assignedUserId], references: [id])
  // Tag            Tag?    @relation(fields: [tagId], references: [id])
  Tags           TicketTag[] // Связь через промежуточную таблицу
  tagId          String?     @db.String

  @@index([laneId])
  @@index([customerId])
  @@index([assignedUserId])
}

model TicketTag {
  id       String @id @default(uuid()) @map("_id") @db.String
  ticketId String @db.String
  tagId    String @db.String

  Ticket Ticket @relation(fields: [ticketId], references: [id])
  Tag    Tag    @relation(fields: [tagId], references: [id])

  @@unique([ticketId, tagId]) // Уникальность пары ticketId и tagId
}

enum TriggerTypes {
  CONTACT_FORM
}

model Trigger {
  id           String       @id @default(uuid()) @map("_id") @db.String
  name         String
  type         TriggerTypes
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  subAccountId String       @db.String
  Subaccount   SubAccount   @relation(fields: [subAccountId], references: [id])
  Automations  Automation[]

  @@index([subAccountId])
}

model Automation {
  id                 String               @id @default(uuid()) @map("_id") @db.String
  name               String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  triggerId          String?              @db.String
  published          Boolean              @default(false)
  Trigger            Trigger?             @relation(fields: [triggerId], references: [id])
  subAccountId       String               @db.String
  Subaccount         SubAccount           @relation(fields: [subAccountId], references: [id])
  Action             Action[]
  AutomationInstance AutomationInstance[]

  @@index([triggerId])
  @@index([subAccountId])
}

model AutomationInstance {
  id           String     @id @default(uuid()) @map("_id") @db.String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String     @db.String
  Automation   Automation @relation(fields: [automationId], references: [id])
  active       Boolean    @default(false)

  @@index([automationId])
}

enum ActionType {
  CREATE_CONTACT
}

model Action {
  id           String     @id @default(uuid()) @map("_id") @db.String
  name         String
  type         ActionType
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String     @db.String
  order        Int
  Automation   Automation @relation(fields: [automationId], references: [id])
  laneId       String     @default("0")

  @@index([automationId])
}

model Contact {
  id           String   @id @default(uuid()) @map("_id") @db.String
  name         String
  email        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  subAccountId String   @db.String

  Subaccount SubAccount @relation(fields: [subAccountId], references: [id])
  Ticket     Ticket[]

  @@index([subAccountId])
}

model Media {
  id           String     @id @default(uuid()) @map("_id") @db.String
  type         String?
  name         String
  link         String     @unique
  subAccountId String     @db.String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Subaccount   SubAccount @relation(fields: [subAccountId], references: [id])

  @@index([subAccountId])
}

model Funnel {
  id            String       @id @default(uuid()) @map("_id") @db.String
  name          String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  description   String?
  published     Boolean      @default(false)
  subDomainName String?      @unique
  favicon       String?
  subAccountId  String       @db.String
  SubAccount    SubAccount   @relation(fields: [subAccountId], references: [id])
  FunnelPages   FunnelPage[]
  liveProducts  String?
  ClassName     ClassName[]

  @@index([subAccountId])
}

model ClassName {
  id         String   @id @default(uuid()) @map("_id") @db.String
  name       String
  color      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  funnelId   String   @db.String
  customData String?
  Funnel     Funnel   @relation(fields: [funnelId], references: [id])

  @@index([funnelId])
}

model FunnelPage {
  id           String   @id @default(uuid()) @map("_id") @db.String
  name         String
  pathName     String   @default("")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  visits       Int      @default(0)
  content      String?
  order        Int
  previewImage String?
  funnelId     String   @db.String
  Funnel       Funnel   @relation(fields: [funnelId], references: [id])

  @@index([funnelId])
}

model AgencySidebarOption {
  id        String   @id @default(uuid()) @map("_id") @db.String
  name      String   @default("Menu")
  link      String   @default("#")
  icon      Icon     @default(info)
  agencyId  String   @db.String
  Agency    Agency?  @relation(fields: [agencyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agencyId])
}

model SubAccountSidebarOption {
  id           String      @id @default(uuid()) @map("_id") @db.String
  name         String      @default("Menu")
  link         String      @default("#")
  icon         Icon        @default(info)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id])
  subAccountId String?     @db.String

  @@index([subAccountId])
}

model Invitation {
  id       String           @id @default(uuid()) @map("_id") @db.String
  email    String           @unique
  agencyId String           @db.String
  Agency   Agency           @relation(fields: [agencyId], references: [id])
  status   InvitationStatus @default(PENDING)
  role     Role             @default(SUBACCOUNT_USER)

  @@index([agencyId])
}

model Notification {
  id           String  @id @default(uuid()) @map("_id") @db.String
  notification String
  agencyId     String  @db.String
  subAccountId String? @db.String
  userId       String  @db.String

  User       User        @relation(fields: [userId], references: [id])
  Agency     Agency      @relation(fields: [agencyId], references: [id])
  SubAccount SubAccount? @relation(fields: [subAccountId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agencyId])
  @@index([subAccountId])
  @@index([userId])
}

enum Plan {
  price_1QNCpjDzaQgFnciuAGEkED6i
  price_1QNCpjDzaQgFnciuFoXRsU4L
}

model Subscription {
  id        String   @id @default(uuid()) @map("_id") @db.String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plan      Plan?
  price     String?
  active    Boolean  @default(false)

  priceId              String
  customerId           String
  currentPeriodEndDate DateTime
  subscritiptionId     String   @unique

  agencyId String? @unique @db.String
  Agency   Agency? @relation(fields: [agencyId], references: [id])

  @@index([customerId])
}

model AddOns {
  id        String   @id @default(uuid()) @map("_id") @db.String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  active    Boolean  @default(false)
  priceId   String   @unique
  agencyId  String?  @db.String
  Agency    Agency?  @relation(fields: [agencyId], references: [id])

  @@index([agencyId])
}
